* Lab 2
** Step 1
[[https://alexcabal.com/creating-the-perfect-gpg-keypair/][Creating the perfect GPG keypair]] is a detailed and up-to-date
   article that will guide you through creating your own GPG
   keypair. Please create the GPG according to the article.
*** Notice that the following section can be skipped in this lab:
**** Adding a picture
**** In case of emergency
*** Known issue
**** Not enough entropy
If you receive a complain like this when trying to generate the GPG key pair:
#+BEGIN_QUOTE
**We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
Not enough random bytes available.  Please do some other work to give
the OS a chance to collect more entropy! (Need 210 more bytes)**
#+END_QUOTE
Please try the following steps before generating the key pair again:
#+BEGIN_SRC bash
  sudo apt-get install rng-tools
  sudo rngd -r /dev/urandom
#+END_SRC

** Step2
Export your public key created in step one as
your_TU_id.public.gpg-key (for example, zic123.public.gpg-key)

** Step3
Create a message named as your_TU_id.txt (for example, zic123.txt)
which include three lines as follow (your name, your id, your netid):
#+BEGIN_SRC
Jerry Chai
14912345
zic123
#+END_SRC

** Step4
Sign the .txt file you just created in Step3 (for example, zic123.txt)
with your private key using gpg according to [[https://www.gnupg.org/gph/en/manual/x135.html][The GNU Privacy Handbook]].
#+BEGIN_SRC shell
  gpg --output zic123.txt.sig --sign zic123.txt
#+END_SRC

** Step5
Upload the following three files (the zix123 here should be your own
TU NetID) to Harvey:
#+BEGIN_SRC
zic123.public.gpg-kep
zic123.txt
zic123.txt.sig
#+END_SRC

** Sending an encrypted message to Jerry
*** Find Jerry's GPG public key
Jerry's public key is available in the online public key pool. One way
to download it is as follows:
#+BEGIN_SRC shell
  [user@email ~]$ gpg --keyserver pool.sks-keyservers.net --search-keys zic337@utulsa.edu
  gpg: searching for "zic337@utulsa.edu" from hkp server pool.sks-keyservers.net
  (1)	Jerry Chai <zic337@utulsa.edu>
            4096 bit RSA key D5E661BE, created: 2017-02-08, expires: 2019-02-08
  Keys 1-1 of 1 for "zic337@utulsa.edu".  Enter number(s), N)ext, or Q)uit > 1
  gpg: requesting key D5E661BE from hkp server pool.sks-keyservers.net
  gpg: lookup_hashtable failed: eof
  gpg: key D5E661BE: public key "Jerry Chai <zic337@utulsa.edu>" imported
  gpg: Total number processed: 1
  gpg:               imported: 1  (RSA: 1)
#+END_SRC

*** Verify the GPG fingerprint
One should always verify the fingerprint of the GPG before trusting
it. The fingerprint should be gotten from a trusted channel (for
example, through web-of-trust, through the owner's personal website
with HTTPS connection enabled, or through the business card the owner
gave you.)

In Lab 2, the fingerprint of Jerry's public key is given through Harvey.
#+BEGIN_SRC shell
  [user@email ~]$ gpg --fingerprint zic337@utulsa.edu
  pub   4096R/D5E661BE 2017-02-08 [expires: 2019-02-08]
        Key fingerprint = 9172 A93E 82BA 3841 FFAC  6266 8638 1DC8 D5E6 61BE
  uid                  Jerry Chai <zic337@utulsa.edu>
  sub   4096R/44805C51 2017-02-08 [expires: 2019-02-08]
#+END_SRC

*** Create a message
**** File name
Create a file named your_TU_id.txt. For example, if abc123 is your
TU_id, then the file should be called abc123.txt.  Please do not use
any other form as the file name. Examples of common BAD file names
include: 1491321.txt, CS.txt, i_do_not_care.txt.

**** Content in the file
There should be two lines in your file. The first line is "The meaning
of life is 42.".  The second line is "Name: Your Name". Please include
the string "Name: " on your second line.
#+BEGIN_SRC shell
  [user@email ~]$ cat zic337.txt
  The meaning of life is 42.
  Name: Jerry Chai
#+END_SRC

*** Encrypt the message
#+BEGIN_SRC shell
  [user@email ~]$ gpg -r zic337@utulsa.edu --encrypt your_TU_id.txt
  gpg: lookup_hashtable failed: eof
  gpg: lookup_hashtable failed: eof
  gpg: 44805C51: There is no assurance this key belongs to the named user

  pub  4096R/44805C51 2017-02-08 Jerry Chai <zic337@utulsa.edu>
   Primary key fingerprint: 9172 A93E 82BA 3841 FFAC  6266 8638 1DC8 D5E6 61BE
        Subkey fingerprint: 2AC0 259D A78A 620F 4265  A529 D2F7 6A9C 4480 5C51

  It is NOT certain that the key belongs to the person named
  in the user ID.  If you *really* know what you are doing,
  you may answer the next question with yes.

  Use this key anyway? (y/N) y
#+END_SRC

*** Submit the encryted message
After executing the command line above, you should get a file called
"your_TU_id.txt.gpg".
#+BEGIN_SRC shell
  [user@email ~]$ ls -l zic123.txt.gpg
  -rw-rw-r-- 1 user user 600 Apr  5 15:28 zic123.txt.gpg
#+END_SRC
